#!/usr/bin/env node
require("coffee-script");
var
    watch = require("watch"),
    path = require("path"),
    server = require("../server"),
    debounce = require("lodash.debounce"),
    once = require("lodash.once"),
    optimist = require('optimist'),
    minimatch = require("minimatch");

var argv = optimist
  .usage('Usage: quickreload [root] {OPTIONS}')
  .wrap(80)
  .option('help', {
    alias: 'h',
    desc : 'Show this help'
  })
  .option('css', {
    default: 'css,sass,less,scss,styl',
    desc : 'CSS file extensions.'
  })
  .option('js', {
    default: 'js,coffee,json',
    desc : 'JavaScript file extensions.'
  })
  .option('html', {
    default: 'html',
    desc : 'HTML file extensions.'
  })
  .option('ignore', {
    alias : 'i',
    desc : 'Ignore a directory or glob string'
  }).argv;

if (argv.help) {
  return optimist.showHelp()
}

var send = server.serve();
var allExts = "*{"+[argv.css, argv.js, argv.html].join(",")+"}"; 

function excludeFiles(f, stat) {
  // Exclude dot files
  if (path.basename(f)[0] == '.') return true;

  var matchIgnore = argv.ignore && minimatch(f, argv.ignore)

  if (stat.isDirectory()) return matchIgnore;

  return !minimatch(path.basename(f), allExts);
}

function hasExt(extensions) {
  return function(f) {
    return minimatch(f, "*.{"+extensions+"}")    
  }
}

var handlers = [
  {
    match: hasExt(argv.css),
    onChange: debounce(send.bind(send, "reload-css"), 50)
  },
  {
    match: hasExt(argv.js),
    onChange: debounce(send.bind(send, "reload-js"), 50)
  },
  {
    match: hasExt(argv.html),
    onChange: debounce(send.bind(send, "reload"), 50)
  }
];

var handleChange = function(f, stat) {
  handlers.some(function(handler) {
    if (handler.match(f)) {
      handler.onChange(f);
      return true;
    }
  });
};

watch.createMonitor(".", {filter: excludeFiles}, once(function (monitor) {
  monitor.on("created", handleChange);
  monitor.on("changed", handleChange);
  monitor.on("removed", handleChange);
  console.log("Watching %d files in %s", Object.keys(monitor.files).length, path.resolve("."))
}));
